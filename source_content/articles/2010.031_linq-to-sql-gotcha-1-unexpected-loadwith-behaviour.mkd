title: LINQ to SQL Gotcha #1: Unexpected LoadWith Behaviour
labels: .NET, LINQ, LINQ to SQL, SQL Server, VB.NET

By default, LINQ to SQL uses deferred loading.  When you want to eager load an entity's associated data you need to set <code>DataLoadOptions</code> using the <code>LoadOptions</code> property on the <code>DataContext</code>.  If you have a one-to-many relationship between <code>Users</code> and <code>Articles</code> you can force LINQ to SQL to eager load <code>Articles</code> with <code>Users</code> like this<!--break-->:

```vbnet
Using testData As New TestDataContext

    ' Log SQL queries to the console
    testData.Log = Console.Out

    ' Set LoadOptions
    Dim options As New DataLoadOptions
    options.LoadWith(Function(user As User) user.Articles)
    testData.LoadOptions = options

    ' Load users with their articles
    Dim users = testData.Users.ToList
    For Each user In users
        Dim articles = user.Articles.ToList
    Next

End Using
```

This will generate a single <code>SELECT</code> statement with a <code>JOIN</code> on the <code>Articles</code> table.  The same goes for for one-to-one relationships.  You can also use <code>LoadWith</code> as many times as you want.  For one-to-one relationships and no more than a single one-to-many relationship this will still generate one query with <code>JOIN</code>s to all the <code>LoadWith</code> tables.  However, if you want to eager load multiple one-to-many relationships you will get into a select N + 1 situation (or worse).  For example, this code eager loads <code>Articles</code> and <code>UserGroups</code> with each <code>User</code> entity:

```vbnet
Using testData As New TestDataContext

    ' Log SQL queries to the console
    testData.Log = Console.Out

    ' Set LoadOptions
    Dim options As New DataLoadOptions
    options.LoadWith(Function(user As User) user.Articles)
    options.LoadWith(Function(user As User) user.UserGroups)
    testData.LoadOptions = options

    ' Load users with their articles
    Dim users = testData.Users.ToList
    For Each user In users
        Dim articles = user.Articles.ToList
        Dim userGroups = user.UserGroups.ToList
    Next

End Using
```

Technically, the behaviour here is correct.  It will successfully eager load both the <code>Articles</code> and <code>UserGroups</code> collections for each <code>User</code>, but it will <em>not</em> do it in a single query.  When I ran this I got one query that fetched the <code>Users</code> and <code>Articles</code> like last time, but then a separate <code>SELECT</code> for each <code>UserGroup</code> rather than another <code>JOIN</code>.  Even though this won't alter the behaviour of the code, it will definitely make a major impact on performance, especially if there are a lot of users in the database.

Scott Guthrie confirmed this behaviour in a <a href="http://codebetter.com/blogs/david.hayden/archive/2007/08/06/linq-to-sql-query-tuning-appears-to-break-down-in-more-advanced-scenarios.aspx">post on David Hayden's blog</a>.  This is what he said:

> In the case of a 1:n associations, LINQ to SQL only supports joining-in one 1:n association per query.

Lame.
